import { headers, cookies } from 'next/headers';

type AwaitedProp<T extends (...args: any) => any, P extends string> = Awaited<ReturnType<T>>[P];

type HeaderParams = Parameters<AwaitedProp<typeof headers, "get">>;
type HeaderReturn = ReturnType<AwaitedProp<typeof headers, "get">>;
type HeaderFn = (...args: HeaderParams) => Promise<HeaderReturn>;
type GetHeadersFn = () => Promise<Awaited<ReturnType<typeof headers>>>;
declare const header: HeaderFn;
declare const getHeaders: GetHeadersFn;

type CookieGetParams = Parameters<AwaitedProp<typeof cookies, "get">>;
type CookieSetParams = Parameters<ReturnType<AwaitedProp<typeof cookies, "set">>["set"]>;
type CookieGetReturn = ReturnType<AwaitedProp<typeof cookies, "get">>;
type CookieSetReturn = ReturnType<AwaitedProp<typeof cookies, "set">>;
type GetCookiesFn = () => Promise<Awaited<ReturnType<typeof cookies>>>;
declare const cookie: {
    (name: CookieGetParams[0]): Promise<CookieGetReturn>;
    (name: CookieGetParams[0], value: CookieSetParams[1], options?: CookieSetParams[2]): Promise<CookieSetReturn>;
};
declare const getCookies: GetCookiesFn;

export { cookie, getCookies, getHeaders, header };
